import unittest
from binary_search_tree import *

class TestLab4(unittest.TestCase):

    def test_simple(self):
        bst = BinarySearchTree()
        self.assertFalse(bst.delete(5))
        self.assertTrue(bst.is_empty())
        self.assertFalse(bst.search(5))
        self.assertEqual(bst.find_min(), None)
        self.assertEqual(bst.find_max(), None)
        self.assertEqual(bst.tree_height(), None)
        bst.insert(10, 'stuff')
        self.assertTrue(bst.delete(10))
        bst.insert(10, 'stuff')
        bst.insert(1, 'stuff')
        self.assertTrue(bst.delete(10))
        self.assertTrue(bst.delete(1))
        bst.insert(10, 'stuff')
        bst.insert(1, 'stuff')
        bst.insert(19, 'stuff')
        self.assertTrue(bst.delete(10))
        self.assertTrue(bst.delete(19))
        self.assertTrue(bst.delete(1))
        bst.insert(10, 'stuff')
        bst.insert(19, 'stuff')
        self.assertTrue(bst.delete(10))
        self.assertTrue(bst.delete(19))
        bst.insert(10, 'stuff')
        bst.insert(1, 'stuff')
        bst.insert(19, 'stuff')
        bst.insert(19, 'stuff')
        bst.insert(21, 'stuff')
        bst.insert(15, 'stuff')
        bst.insert(2, 'stuff')
        bst.insert(6, 'stuff')
        bst.insert(0, 'stuff')
        self.assertTrue(bst.delete(0))
        bst.insert(0, 'stuff')
        self.assertFalse(bst.is_empty())
        self.assertTrue(bst.search(10))
        self.assertTrue(bst.search(15))
        self.assertFalse(bst.search(13))
        self.assertFalse(bst.search(5))
        self.assertFalse(bst.search(16))
        self.assertTrue(bst.search(19))
        self.assertTrue(bst.search(1))
        self.assertEqual(bst.find_min(), (0, 'stuff'))
        self.assertEqual(bst.find_max(), (21, 'stuff'))
        self.assertEqual(bst.tree_height(), 3)
        self.assertEqual(bst.inorder_list(), [0, 1, 2, 6, 10, 15, 19, 21])
        self.assertEqual(bst.preorder_list(), [10, 1, 0, 2, 6, 19, 15, 21])
        self.assertFalse(bst.delete(5))
        self.assertTrue(bst.delete(10))
        self.assertEqual(bst.inorder_list(), [0, 1, 2, 6, 15, 19, 21])
        self.assertEqual(bst.preorder_list(), [15, 1, 0, 2, 6, 19, 21])
        self.assertTrue(bst.delete(1))
        self.assertEqual(bst.preorder_list(), [15, 2, 0, 6, 19, 21])
        bst.insert(5, 'stuff')
        bst.insert(3, 'stuff')
        self.assertEqual(bst.preorder_list(), [15, 2, 0, 6, 5, 3, 19, 21])
        self.assertTrue(bst.delete(2))
        bst.insert(7, 'stuff')
        self.assertTrue(bst.delete(5))
        self.assertEqual(bst.preorder_list(), [15, 3, 0, 6, 7, 19, 21])
        bst.insert(1, 'stuff')
        self.assertTrue(bst.delete(0))
        bst.insert(0, 'stuff')
        self.assertTrue(bst.delete(1))
        bst.insert(18, 'stuff')
        bst.insert(20, 'stuff')
        self.assertTrue(bst.delete(19))
        self.assertTrue(bst.delete(21))
        self.assertTrue(bst.delete(20))
        bst.insert(18, 'other')
        print(bst.find_max())


if __name__ == '__main__': 
    unittest.main()
